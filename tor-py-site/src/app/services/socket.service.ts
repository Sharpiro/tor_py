import { Injectable, Inject, InjectionToken } from '@angular/core';
import { Subject, Observable, of, ReplaySubject, from } from 'rxjs';
import { delay, concatMap, map } from 'rxjs/operators';
import { environment } from "../../environments/environment"

export const SOCKET_URL = new InjectionToken<string>('SocketUrl');

@Injectable({
  providedIn: 'root'
})
export class SocketService {
  private webSocketSubject: ReplaySubject<WebSocket>
  private messageSubject = new Subject<string>()

  constructor(@Inject(SOCKET_URL) private hostAndPort: string) { }

  private get webSocket(): Observable<WebSocket> {
    if (this.webSocketSubject) return this.webSocketSubject

    this.webSocketSubject = new ReplaySubject<WebSocket>()
    const protocol = environment.production ? "wss" : "ws"
    const webSocket = new WebSocket(`${protocol}://${this.hostAndPort}`)
    webSocket.onopen = _ => {
      webSocket.onmessage = event => this.messageSubject.next(event.data)
      this.webSocketSubject.next(webSocket)
    }
    return this.webSocketSubject
  }

  getMessages(): Observable<Message> {
    return this.messageSubject.pipe(
      map(json => JSON.parse(json)),
      concatMap(x => of(x).pipe(delay(500)))
    )
  }

  // getMessages(): Observable<Message> {
  //   return from([
  //     // tslint:disable
  //     { "title": "sendVersions", "data": { "cell": { "circuitId": 0, "command": "versions", "cellType": "VariableCell", "payloadLength": 2, "rawPayload": [0, 3] }, "payload": { "versions": [3] } } },
  //     { "title": "sendCreate2", "data": { "cell": { "circuitId": 60000, "command": "create2", "cellType": "cell", "payloadLength": 88, "rawPayload": [0, 2, 0, 84, 151, 21, 200, 27, 168, 197, 176, 198, 152, 136, 32, 53, 247, 92, 103, 214, 214, 67, 219, 227, 35, 76, 108, 216, 197, 65, 230, 220, 63, 20, 119, 20, 198, 194, 210, 245, 216, 247, 69, 31, 200, 42, 109, 165, 8, 40, 105, 63, 15, 253, 67, 82, 240, 255, 42, 152, 197, 238, 117, 41, 94, 101, 61, 41, 163, 249, 130, 164, 153, 239, 115, 161, 251, 154, 72, 190, 125, 49, 21, 35, 196, 67, 20, 102] }, "handshakeData": { "handshakeType": 2, "ephMyPrivateKey": [206, 232, 11, 9, 6, 76, 186, 180, 99, 229, 238, 242, 58, 163, 71, 51, 233, 15, 176, 94, 171, 60, 217, 186, 21, 105, 214, 24, 240, 138, 240, 165], "ephMyPublicKey": [240, 255, 42, 152, 197, 238, 117, 41, 94, 101, 61, 41, 163, 249, 130, 164, 153, 239, 115, 161, 251, 154, 72, 190, 125, 49, 21, 35, 196, 67, 20, 102], "serverIdentityDigest": [151, 21, 200, 27, 168, 197, 176, 198, 152, 136, 32, 53, 247, 92, 103, 214, 214, 67, 219, 227], "onionKey": [35, 76, 108, 216, 197, 65, 230, 220, 63, 20, 119, 20, 198, 194, 210, 245, 216, 247, 69, 31, 200, 42, 109, 165, 8, 40, 105, 63, 15, 253, 67, 82] } } },
  //     { "title": "recvCreated2", "data": { "cell": { "circuitId": 60000, "command": "created2", "cellType": "cell", "payloadLength": 509, "rawPayload": [0, 64, 228, 37, 167, 174, 115, 5, 230, 139, 56, 29, 175, 43, 61, 255, 158, 43, 238, 30, 135, 18, 153, 248, 72, 25, 4, 87, 251, 94, 100, 68, 162, 57, 4, 233, 122, 105, 165, 175, 238, 21, 166, 14, 236, 10, 253, 10, 141, 75, 21, 119, 217, 91, 215, 183, 13, 111, 120, 255, 241, 193, 36, 197, 141, 146, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }, "payload": { "ephServerPublicKey": [228, 37, 167, 174, 115, 5, 230, 139, 56, 29, 175, 43, 61, 255, 158, 43, 238, 30, 135, 18, 153, 248, 72, 25, 4, 87, 251, 94, 100, 68, 162, 57], "serverAuth": [4, 233, 122, 105, 165, 175, 238, 21, 166, 14, 236, 10, 253, 10, 141, 75, 21, 119, 217, 91, 215, 183, 13, 111, 120, 255, 241, 193, 36, 197, 141, 146] } } },
  //     { "title": "sendExtend2", "data": { "cell": { "circuitId": 60000, "command": "relay_early", "cellType": "cell", "payloadLength": 509, "rawPayload": [200, 244, 220, 34, 186, 56, 156, 155, 165, 90, 28, 99, 197, 177, 130, 137, 182, 122, 169, 187, 50, 142, 46, 137, 132, 211, 20, 48, 87, 204, 27, 176, 154, 84, 76, 137, 197, 62, 52, 205, 206, 105, 17, 245, 249, 204, 83, 166, 192, 218, 65, 216, 24, 78, 226, 0, 13, 133, 0, 30, 24, 100, 50, 193, 194, 159, 8, 87, 219, 239, 226, 176, 202, 137, 58, 67, 219, 144, 225, 112, 75, 23, 161, 243, 190, 245, 81, 106, 91, 199, 65, 6, 117, 37, 141, 243, 142, 246, 197, 191, 120, 154, 244, 211, 179, 245, 78, 94, 39, 124, 130, 251, 243, 100, 114, 25, 34, 191, 157, 114, 239, 178, 243, 229, 228, 141, 20, 246, 80, 8, 64, 2, 150, 157, 229, 41, 160, 67, 230, 58, 149, 61, 2, 220, 226, 207, 213, 33, 10, 173, 93, 114, 43, 128, 160, 163, 108, 27, 229, 249, 199, 193, 199, 172, 112, 52, 117, 202, 78, 21, 45, 212, 151, 162, 55, 227, 104, 156, 43, 212, 77, 251, 122, 226, 196, 212, 22, 211, 44, 223, 105, 49, 69, 176, 195, 112, 129, 133, 238, 185, 22, 62, 212, 244, 177, 132, 15, 163, 153, 25, 233, 146, 71, 3, 120, 5, 33, 9, 62, 228, 31, 83, 193, 19, 176, 150, 74, 204, 170, 57, 70, 17, 41, 224, 192, 249, 99, 47, 16, 195, 117, 204, 191, 28, 87, 213, 155, 43, 159, 126, 27, 194, 76, 208, 197, 62, 206, 11, 146, 181, 73, 164, 194, 95, 4, 184, 24, 99, 195, 112, 127, 36, 180, 253, 164, 229, 226, 116, 5, 104, 186, 200, 234, 20, 51, 126, 210, 160, 10, 43, 138, 122, 44, 106, 183, 159, 239, 183, 100, 175, 203, 24, 180, 42, 230, 250, 191, 51, 164, 207, 5, 2, 157, 181, 101, 56, 35, 107, 99, 210, 176, 96, 11, 133, 90, 71, 237, 177, 133, 106, 167, 50, 80, 74, 41, 208, 141, 116, 6, 60, 181, 143, 32, 99, 33, 244, 246, 9, 138, 235, 11, 180, 49, 86, 8, 220, 248, 151, 150, 22, 62, 68, 52, 8, 66, 105, 112, 46, 84, 1, 85, 167, 53, 149, 180, 173, 115, 36, 36, 134, 30, 135, 80, 199, 130, 86, 172, 36, 191, 40, 186, 112, 123, 102, 128, 209, 193, 204, 97, 99, 177, 38, 175, 30, 153, 190, 128, 47, 100, 163, 122, 2, 127, 181, 164, 175, 196, 188, 21, 221, 163, 191, 185, 100, 150, 44, 93, 206, 78, 92, 81, 155, 16, 43, 251, 240, 117, 117, 139, 229, 50, 17, 255, 233, 148, 136, 147, 36, 39, 42, 107, 132, 180, 68, 154, 210, 162, 247, 112, 161, 169, 5, 182, 194, 224, 23, 228, 112, 220, 24, 78, 14, 66, 151, 8, 222, 52, 218, 178, 101, 203, 177, 69, 116, 86, 54, 88, 238, 162, 94, 173, 90, 100, 213, 225, 59, 115, 227, 90, 143, 49, 60, 190, 113, 200, 122, 213, 60, 127] }, "handshakeData": { "handshakeType": 2, "ephMyPrivateKey": [234, 21, 159, 189, 153, 152, 173, 83, 50, 158, 39, 191, 156, 97, 246, 52, 130, 194, 231, 229, 231, 93, 61, 166, 16, 119, 152, 191, 69, 104, 198, 10], "ephMyPublicKey": [150, 124, 1, 189, 169, 234, 194, 86, 148, 70, 195, 52, 138, 36, 209, 46, 157, 26, 217, 24, 51, 69, 200, 43, 147, 226, 252, 116, 135, 162, 63, 84], "serverIdentityDigest": [60, 89, 21, 52, 141, 115, 21, 5, 196, 129, 18, 244, 240, 50, 53, 253, 231, 184, 200, 55], "onionKey": [240, 123, 87, 117, 22, 63, 115, 240, 207, 43, 49, 109, 153, 203, 72, 33, 214, 123, 121, 178, 165, 74, 157, 104, 169, 91, 200, 60, 161, 112, 65, 27] } } },
  //     { "title": "recvExtended2", "data": { "cell": { "circuitId": 60000, "command": "relay", "cellType": "cell", "payloadLength": 509, "rawPayload": [15, 0, 0, 0, 0, 28, 218, 140, 189, 0, 66, 0, 64, 10, 134, 114, 34, 54, 224, 233, 71, 74, 205, 169, 89, 179, 210, 44, 171, 136, 37, 163, 48, 230, 39, 46, 46, 29, 144, 173, 130, 80, 196, 18, 10, 177, 104, 185, 178, 111, 141, 203, 153, 90, 54, 118, 26, 112, 20, 147, 133, 119, 118, 122, 185, 17, 142, 122, 247, 52, 167, 58, 41, 151, 187, 188, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }, "payload": { "ephServerPublicKey": [10, 134, 114, 34, 54, 224, 233, 71, 74, 205, 169, 89, 179, 210, 44, 171, 136, 37, 163, 48, 230, 39, 46, 46, 29, 144, 173, 130, 80, 196, 18, 10], "serverAuth": [177, 104, 185, 178, 111, 141, 203, 153, 90, 54, 118, 26, 112, 20, 147, 133, 119, 118, 122, 185, 17, 142, 122, 247, 52, 167, 58, 41, 151, 187, 188, 50] } } }
  //     // tslint:enable
  //   ]).pipe(
  //     concatMap(x => of(x).pipe(delay(500)))
  //   )
  // }

  sendMessage(title: string, data: string) {
    this.webSocket.subscribe(webSocket => {
      const message = { title, data }
      webSocket.send(JSON.stringify(message))
    })
  }
}

export interface Message {
  title: string
  data: any
}
